import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import asyncio
import logging
from datetime import datetime
import gspread
from google.oauth2.service_account import Credentials

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = '8066655989:AAEqpJmKgS5uxrrJyYJTcTDAsQGoZZnrJoY'
ADMIN_CHAT_ID = '5730801538'
SPREADSHEET_ID = ''

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

scope = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]

def get_google_sheets_client():
    try:
        creds = Credentials.from_service_account_file('credentials.json', scopes=scope)
        client = gspread.authorize(creds)
        return client
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}')
        return None

def save_to_google_sheets(data):
    try:
        client = get_google_sheets_client()
        if not client:
            return False
        
        if SPREADSHEET_ID:
            sheet = client.open_by_key(SPREADSHEET_ID).sheet1
        else:
            sheet = client.open('–ó–∞—è–≤–∫–∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å—è').sheet1
        
        row = [
            datetime.now().strftime('%d.%m.%Y %H:%M'),
            ', '.join(data['districts']),
            ', '.join(data['property_type']),
            data['move_in_date'],
            data['rental_period'],
            data['residents'],
            data['with_children'],
            data['with_pets'],
            data['budget'],
            data['rooms'],
            data['wishes'],
            data['contact']
        ]
        
        if sheet.row_count == 0 or sheet.row_values(1) == []:
            headers = [
                '–î–∞—Ç–∞/–í—Ä–µ–º—è', '–†–∞–π–æ–Ω—ã', '–¢–∏–ø –∂–∏–ª—å—è', '–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞', 
                '–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã', '–ñ–∏–ª—å—Ü–æ–≤', '–î–µ—Ç–∏', '–ü–∏—Ç–æ–º—Ü—ã', 
                '–ë—é–¥–∂–µ—Ç', '–ö–æ–º–Ω–∞—Ç', '–ü–æ–∂–µ–ª–∞–Ω–∏—è', '–ö–æ–Ω—Ç–∞–∫—Ç'
            ]
            sheet.append_row(headers)
        
        sheet.append_row(row)
        return True
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets: {e}')
        return False


class RentalForm(StatesGroup):
    districts = State()
    property_type = State()
    move_in_date = State()
    rental_period = State()
    residents = State()
    with_children = State()
    with_pets = State()
    budget = State()
    rooms = State()
    wishes = State()
    contact = State()


DISTRICTS = [
    '–ê–≤–∞–Ω', '–ê—Ä–∞–±–∫–∏—Ä', '–ê—á–∞–ø–Ω—è–∫', '–î–∞–≤—Ç–∞—à–µ–Ω', 
    '–ö–∞–Ω–∞–∫–µ—Ä-–ó–µ–π—Ç—É–Ω', '–ö–µ–Ω—Ç—Ä–æ–Ω (–¶–µ–Ω—Ç—Ä)', '–ú–∞–ª–∞—Ç–∏—è-–°–µ–±–∞—Å—Ç–∏—è',
    '–ù–æ—Ä-–ù–æ—Ä–∫', '–ù–æ—Ä–∫-–ú–∞—Ä–∞—à', '–®–µ–Ω–≥–∞–≤–∏—Ç', '–≠—Ä–µ–±—É–Ω–∏'
]


def make_districts_keyboard():
    buttons = [[KeyboardButton(text=district)] for district in DISTRICTS]
    buttons.append([KeyboardButton(text='‚úÖ –ì–æ—Ç–æ–≤–æ')])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def make_property_keyboard():
    keyboard = [
        [KeyboardButton(text='–ö–≤–∞—Ä—Ç–∏—Ä–∞')],
        [KeyboardButton(text='–î–æ–º')],
        [KeyboardButton(text='‚úÖ –ì–æ—Ç–æ–≤–æ')]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def make_rental_period_keyboard():
    keyboard = [
        [KeyboardButton(text='6 –º–µ—Å—è—Ü–µ–≤')],
        [KeyboardButton(text='1 –≥–æ–¥')],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)


def make_residents_keyboard():
    keyboard = [
        [KeyboardButton(text='1'), KeyboardButton(text='2'), KeyboardButton(text='3')],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)


def make_yes_no_keyboard(yes_text: str, no_text: str):
    keyboard = [
        [KeyboardButton(text=yes_text)],
        [KeyboardButton(text=no_text)],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)


@dp.message(Command('start'))
async def cmd_start(message: types.Message, state: FSMContext):
    logging.info(f'–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}')
    await state.clear()
    await message.answer(
        "üè† <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è –≤ –ï—Ä–µ–≤–∞–Ω–µ!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ –∂–∏–ª—å—ë. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å –Ω–µ–±–æ–ª—å—à–æ–≥–æ –æ–ø—Ä–æ—Å–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        parse_mode='HTML'
    )
    await asyncio.sleep(1)
    await message.answer(
        "üìç <b>–®–∞–≥ 1/11: –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–π–æ–Ω–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ <b>‚úÖ –ì–æ—Ç–æ–≤–æ</b>",
        reply_markup=make_districts_keyboard(),
        parse_mode='HTML'
    )
    await state.set_state(RentalForm.districts)
    await state.update_data(districts=[])


@dp.message(Command('cancel'))
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=ReplyKeyboardRemove()
    )


@dp.message(RentalForm.districts)
async def process_districts(message: types.Message, state: FSMContext):
    data = await state.get_data()
    districts = data.get('districts', [])
    
    if message.text == '‚úÖ –ì–æ—Ç–æ–≤–æ':
        if not districts:
            await message.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–π–æ–Ω!")
            return
        
        await message.answer(
            f"‚úÖ –í—ã–±—Ä–∞–Ω—ã —Ä–∞–π–æ–Ω—ã: {', '.join(districts)}\n\n"
            "üèò <b>–®–∞–≥ 2/11: –ö–≤–∞—Ä—Ç–∏—Ä–∞ –∏–ª–∏ –¥–æ–º?</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n"
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ <b>‚úÖ –ì–æ—Ç–æ–≤–æ</b>",
            reply_markup=make_property_keyboard(),
            parse_mode='HTML'
        )
        await state.set_state(RentalForm.property_type)
        await state.update_data(property_type=[])
    else:
        if message.text not in districts:
            districts.append(message.text)
            await state.update_data(districts=districts)
            await message.answer(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {message.text}\n"
                f"üìù –í—ã–±—Ä–∞–Ω–æ —Ä–∞–π–æ–Ω–æ–≤: {len(districts)}\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>‚úÖ –ì–æ—Ç–æ–≤–æ</b>",
                parse_mode='HTML'
            )


@dp.message(RentalForm.property_type)
async def process_property_type(message: types.Message, state: FSMContext):
    data = await state.get_data()
    property_types = data.get('property_type', [])
    
    if message.text == '‚úÖ –ì–æ—Ç–æ–≤–æ':
        if not property_types:
            await message.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –∂–∏–ª—å—è!")
            return
        
        await message.answer(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {', '.join(property_types)}\n\n"
            "üìÖ <b>–®–∞–≥ 3/11: –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>1 –¥–µ–∫–∞–±—Ä—è 2024</i> –∏–ª–∏ <i>–Ω–∞—á–∞–ª–æ —è–Ω–≤–∞—Ä—è</i>",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode='HTML'
        )
        await state.set_state(RentalForm.move_in_date)
    else:
        if message.text not in property_types:
            property_types.append(message.text)
            await state.update_data(property_type=property_types)
            await message.answer(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {message.text}\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <b>‚úÖ –ì–æ—Ç–æ–≤–æ</b>",
                parse_mode='HTML'
            )


@dp.message(RentalForm.move_in_date)
async def process_move_in_date(message: types.Message, state: FSMContext):
    await state.update_data(move_in_date=message.text)
    await message.answer(
        f"‚úÖ –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {message.text}\n\n"
        "‚è± <b>–®–∞–≥ 4/11: –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=make_rental_period_keyboard(),
        parse_mode='HTML'
    )
    await state.set_state(RentalForm.rental_period)


@dp.message(RentalForm.rental_period)
async def process_rental_period(message: types.Message, state: FSMContext):
    await state.update_data(rental_period=message.text)
    await message.answer(
        f"‚úÖ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: {message.text}\n\n"
        "üë• <b>–®–∞–≥ 5/11: –ß–∏—Å–ª–æ –∂–∏–ª—å—Ü–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=make_residents_keyboard(),
        parse_mode='HTML'
    )
    await state.set_state(RentalForm.residents)


@dp.message(RentalForm.residents)
async def process_residents(message: types.Message, state: FSMContext):
    await state.update_data(residents=message.text)
    await message.answer(
        f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–ª—å—Ü–æ–≤: {message.text}\n\n"
        "üë∂ <b>–®–∞–≥ 6/11: –ù–∞–ª–∏—á–∏–µ –¥–µ—Ç–µ–π</b>",
        reply_markup=make_yes_no_keyboard('–° –¥–µ—Ç—å–º–∏', '–ë–µ–∑ –¥–µ—Ç–µ–π'),
        parse_mode='HTML'
    )
    await state.set_state(RentalForm.with_children)


@dp.message(RentalForm.with_children)
async def process_children(message: types.Message, state: FSMContext):
    await state.update_data(with_children=message.text)
    await message.answer(
        f"‚úÖ {message.text}\n\n"
        "üêæ <b>–®–∞–≥ 7/11: –ù–∞–ª–∏—á–∏–µ –ø–∏—Ç–æ–º—Ü–µ–≤</b>",
        reply_markup=make_yes_no_keyboard('–° –ø–∏—Ç–æ–º—Ü–∞–º–∏', '–ë–µ–∑ –ø–∏—Ç–æ–º—Ü–µ–≤'),
        parse_mode='HTML'
    )
    await state.set_state(RentalForm.with_pets)


@dp.message(RentalForm.with_pets)
async def process_pets(message: types.Message, state: FSMContext):
    await state.update_data(with_pets=message.text)
    await message.answer(
        f"‚úÖ {message.text}\n\n"
        "üí∞ <b>–®–∞–≥ 8/11: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ AMD –∏–ª–∏ USD.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>500 USD</i> –∏–ª–∏ <i>200,000 AMD</i>",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='HTML'
    )
    await state.set_state(RentalForm.budget)


@dp.message(RentalForm.budget)
async def process_budget(message: types.Message, state: FSMContext):
    await state.update_data(budget=message.text)
    await message.answer(
        f"‚úÖ –ë—é–¥–∂–µ—Ç: {message.text}\n\n"
        "üö™ <b>–®–∞–≥ 9/11: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>2</i> –∏–ª–∏ <i>—Å—Ç—É–¥–∏—è</i>",
        parse_mode='HTML'
    )
    await state.set_state(RentalForm.rooms)


@dp.message(RentalForm.rooms)
async def process_rooms(message: types.Message, state: FSMContext):
    await state.update_data(rooms=message.text)
    await message.answer(
        f"‚úÖ –ö–æ–º–Ω–∞—Ç: {message.text}\n\n"
        "üìù <b>–®–∞–≥ 10/11: –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤—Å—ë, —á—Ç–æ —Å—á–∏—Ç–∞–µ—Ç–µ –≤–∞–∂–Ω—ã–º:\n"
        "‚Ä¢ –û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∂–∏–ª—å—é\n"
        "‚Ä¢ –ù–∞–ª–∏—á–∏–µ –º–µ–±–µ–ª–∏/—Ç–µ—Ö–Ω–∏–∫–∏\n"
        "‚Ä¢ –ë–ª–∏–∑–æ—Å—Ç—å –∫ –º–µ—Ç—Ä–æ/—à–∫–æ–ª–∞–º\n"
        "‚Ä¢ –î—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏\n\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <i>¬´–ë–µ–∑ –æ—Å–æ–±—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π¬ª</i>",
        parse_mode='HTML'
    )
    await state.set_state(RentalForm.wishes)


@dp.message(RentalForm.wishes)
async def process_wishes(message: types.Message, state: FSMContext):
    await state.update_data(wishes=message.text)
    await message.answer(
        "‚úÖ –ü–æ–∂–µ–ª–∞–Ω–∏—è —É—á—Ç–µ–Ω—ã\n\n"
        "üìû <b>–®–∞–≥ 11/11: –ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n"
        "–ö–∞–∫ —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è?\n"
        "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–∞—à Telegram.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>+374 99 123456</i> –∏–ª–∏ <i>@username</i>",
        parse_mode='HTML'
    )
    await state.set_state(RentalForm.contact)


@dp.message(RentalForm.contact)
async def process_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()
    
    summary = (
        "üéâ <b>–ó–∞—è–≤–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
        "üìã <b>–°–≤–æ–¥–∫–∞ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:</b>\n\n"
        f"üìç <b>–†–∞–π–æ–Ω—ã:</b> {', '.join(data['districts'])}\n"
        f"üèò <b>–¢–∏–ø –∂–∏–ª—å—è:</b> {', '.join(data['property_type'])}\n"
        f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞:</b> {data['move_in_date']}\n"
        f"‚è± <b>–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</b> {data['rental_period']}\n"
        f"üë• <b>–ñ–∏–ª—å—Ü–æ–≤:</b> {data['residents']}\n"
        f"üë∂ <b>–î–µ—Ç–∏:</b> {data['with_children']}\n"
        f"üêæ <b>–ü–∏—Ç–æ–º—Ü—ã:</b> {data['with_pets']}\n"
        f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {data['budget']}\n"
        f"üö™ <b>–ö–æ–º–Ω–∞—Ç:</b> {data['rooms']}\n"
        f"üìù <b>–ü–æ–∂–µ–ª–∞–Ω–∏—è:</b> {data['wishes']}\n"
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {data['contact']}\n\n"
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É."
    )
    
    await message.answer(summary, parse_mode='HTML')
    
    admin_summary = (
        f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{datetime.now().strftime('%Y%m%d-%H%M')}</b>\n\n"
        f"üë§ <b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {message.from_user.full_name}\n"
        f"üÜî <b>Username:</b> @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üÜî <b>User ID:</b> {message.from_user.id}\n\n"
        f"üìç <b>–†–∞–π–æ–Ω—ã:</b> {', '.join(data['districts'])}\n"
        f"üèò <b>–¢–∏–ø –∂–∏–ª—å—è:</b> {', '.join(data['property_type'])}\n"
        f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞:</b> {data['move_in_date']}\n"
        f"‚è± <b>–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</b> {data['rental_period']}\n"
        f"üë• <b>–ñ–∏–ª—å—Ü–æ–≤:</b> {data['residents']}\n"
        f"üë∂ <b>–î–µ—Ç–∏:</b> {data['with_children']}\n"
        f"üêæ <b>–ü–∏—Ç–æ–º—Ü—ã:</b> {data['with_pets']}\n"
        f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {data['budget']}\n"
        f"üö™ <b>–ö–æ–º–Ω–∞—Ç:</b> {data['rooms']}\n"
        f"üìù <b>–ü–æ–∂–µ–ª–∞–Ω–∏—è:</b> {data['wishes']}\n"
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {data['contact']}"
    )
    
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(ADMIN_CHAT_ID, admin_summary, parse_mode='HTML')
            logging.info(f'–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {ADMIN_CHAT_ID}')
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}')
    
    sheets_saved = save_to_google_sheets(data)
    if sheets_saved:
        logging.info('–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google Sheets')
    else:
        logging.warning('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ Google Sheets')
    
    await state.clear()


async def main():
    logging.info('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...')
    logging.info(f'Bot token –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {BOT_TOKEN[:10]}...')
    logging.info(f'Admin chat ID: {ADMIN_CHAT_ID}')
    try:
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}')


if __name__ == '__main__':
    print('ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...')
    asyncio.run(main())